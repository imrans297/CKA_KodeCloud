# Basic Security Context Pod
apiVersion: v1
kind: Pod
metadata:
  name: basic-security-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    runAsNonRoot: true
  containers:
  - name: app
    image: nginx:1.20
    ports:
    - containerPort: 8080

---
# Pod with File System Group
apiVersion: v1
kind: Pod
metadata:
  name: fsgroup-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  containers:
  - name: app
    image: nginx:1.20
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html
  volumes:
  - name: shared-data
    emptyDir: {}

---
# Container with Dropped Capabilities
apiVersion: v1
kind: Pod
metadata:
  name: dropped-capabilities-pod
spec:
  containers:
  - name: app
    image: nginx:1.20
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      capabilities:
        drop: ["ALL"]
        add: ["NET_BIND_SERVICE"]

---
# Read-Only Root Filesystem Pod
apiVersion: v1
kind: Pod
metadata:
  name: readonly-root-pod
spec:
  containers:
  - name: app
    image: nginx:1.20
    securityContext:
      runAsUser: 1000
      runAsNonRoot: true
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
    volumeMounts:
    - name: tmp-volume
      mountPath: /tmp
    - name: var-cache
      mountPath: /var/cache/nginx
    - name: var-run
      mountPath: /var/run
  volumes:
  - name: tmp-volume
    emptyDir: {}
  - name: var-cache
    emptyDir: {}
  - name: var-run
    emptyDir: {}

---
# Privileged Container (Use with caution)
apiVersion: v1
kind: Pod
metadata:
  name: privileged-pod
spec:
  containers:
  - name: privileged-app
    image: nginx:1.20
    securityContext:
      privileged: true

---
# Multi-Container Pod with Different Security Contexts
apiVersion: v1
kind: Pod
metadata:
  name: multi-security-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
  containers:
  - name: web-server
    image: nginx:1.20
    securityContext:
      runAsUser: 1001
      capabilities:
        drop: ["ALL"]
        add: ["NET_BIND_SERVICE"]
  - name: log-processor
    image: busybox:1.35
    command: ['sleep', '3600']
    securityContext:
      runAsUser: 1002
      readOnlyRootFilesystem: true
    volumeMounts:
    - name: tmp
      mountPath: /tmp
  volumes:
  - name: tmp
    emptyDir: {}

---
# Secure Deployment Template
apiVersion: apps/v1
kind: Deployment
metadata:
  name: secure-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: secure-app
  template:
    metadata:
      labels:
        app: secure-app
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
      containers:
      - name: app
        image: nginx:1.20
        securityContext:
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: var-cache
          mountPath: /var/cache/nginx
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
      volumes:
      - name: tmp
        emptyDir: {}
      - name: var-cache
        emptyDir: {}

---
# Database Pod with Security Context
apiVersion: v1
kind: Pod
metadata:
  name: secure-database-pod
spec:
  securityContext:
    runAsUser: 999
    runAsGroup: 999
    fsGroup: 999
    runAsNonRoot: true
  containers:
  - name: postgres
    image: postgres:13
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
    env:
    - name: POSTGRES_PASSWORD
      value: "securepassword"
    - name: PGDATA
      value: /var/lib/postgresql/data/pgdata
    volumeMounts:
    - name: postgres-data
      mountPath: /var/lib/postgresql/data
    - name: tmp
      mountPath: /tmp
    - name: run
      mountPath: /var/run/postgresql
  volumes:
  - name: postgres-data
    emptyDir: {}
  - name: tmp
    emptyDir: {}
  - name: run
    emptyDir: {}

---
# Pod with SELinux Options
apiVersion: v1
kind: Pod
metadata:
  name: selinux-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    seLinuxOptions:
      level: "s0:c123,c456"
  containers:
  - name: app
    image: nginx:1.20

---
# Namespace with Pod Security Standards
apiVersion: v1
kind: Namespace
metadata:
  name: restricted-namespace
  labels:
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Pod that complies with restricted security standard
apiVersion: v1
kind: Pod
metadata:
  name: restricted-compliant-pod
  namespace: restricted-namespace
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 10001
    runAsGroup: 10001
    fsGroup: 10001
    seccompProfile:
      type: RuntimeDefault
  containers:
  - name: app
    image: nginx:1.20
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]
      seccompProfile:
        type: RuntimeDefault
    ports:
    - containerPort: 8080
    volumeMounts:
    - name: tmp
      mountPath: /tmp
    resources:
      requests:
        cpu: 100m
        memory: 128Mi
      limits:
        cpu: 200m
        memory: 256Mi
  volumes:
  - name: tmp
    emptyDir: {}

---
# Service Account with Security Context
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secure-service-account

---
apiVersion: v1
kind: Pod
metadata:
  name: service-account-security-pod
spec:
  serviceAccountName: secure-service-account
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
  containers:
  - name: app
    image: nginx:1.20
    securityContext:
      readOnlyRootFilesystem: true
      allowPrivilegeEscalation: false
      capabilities:
        drop: ["ALL"]