# Basic ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  database_host: "mysql.example.com"
  database_port: "3306"
  database_name: "myapp"
  debug_mode: "true"
  log_level: "info"

---
# ConfigMap with Configuration File
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
data:
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html index.htm;
        }
        
        location /api {
            proxy_pass http://backend:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

---
# Application Properties ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-properties
data:
  application.properties: |
    # Database Configuration
    spring.datasource.url=jdbc:mysql://mysql:3306/myapp
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
    
    # JPA Configuration
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true
    
    # Logging Configuration
    logging.level.com.example=DEBUG
    logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %msg%n

---
# Basic Secret
apiVersion: v1
kind: Secret
metadata:
  name: db-credentials
type: Opaque
data:
  username: YWRtaW4=  # admin
  password: cGFzc3dvcmQxMjM=  # password123

---
# TLS Secret
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTi... # base64 encoded certificate
  tls.key: LS0tLS1CRUdJTi... # base64 encoded private key

---
# Docker Registry Secret
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJyZWdpc3RyeS5leGFtcGxlLmNvbSI6eyJ1c2VybmFtZSI6Im15dXNlciIsInBhc3N3b3JkIjoibXlwYXNzd29yZCIsImVtYWlsIjoibXllbWFpbEBleGFtcGxlLmNvbSIsImF1dGgiOiJiWGwxYzJWeU9tMTVjR0Z6YzNkdmNtUT0ifX19

---
# Pod using ConfigMap as Environment Variables
apiVersion: v1
kind: Pod
metadata:
  name: configmap-env-pod
spec:
  containers:
  - name: app
    image: nginx:1.20
    env:
    - name: DATABASE_HOST
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: database_host
    - name: DATABASE_PORT
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: database_port
    - name: DEBUG_MODE
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: debug_mode

---
# Pod using ConfigMap with envFrom
apiVersion: v1
kind: Pod
metadata:
  name: configmap-envfrom-pod
spec:
  containers:
  - name: app
    image: nginx:1.20
    envFrom:
    - configMapRef:
        name: app-config
    - secretRef:
        name: db-credentials

---
# Pod using ConfigMap as Volume
apiVersion: v1
kind: Pod
metadata:
  name: configmap-volume-pod
spec:
  containers:
  - name: nginx
    image: nginx:1.20
    volumeMounts:
    - name: nginx-config-volume
      mountPath: /etc/nginx/conf.d
    - name: app-config-volume
      mountPath: /etc/config
    ports:
    - containerPort: 80
  volumes:
  - name: nginx-config-volume
    configMap:
      name: nginx-config
      items:
      - key: nginx.conf
        path: default.conf
  - name: app-config-volume
    configMap:
      name: app-properties

---
# Pod using Secrets as Environment Variables
apiVersion: v1
kind: Pod
metadata:
  name: secret-env-pod
spec:
  containers:
  - name: app
    image: mysql:8.0
    env:
    - name: MYSQL_USER
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: username
    - name: MYSQL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: db-credentials
          key: password
    - name: MYSQL_DATABASE
      value: "myapp"

---
# Pod using Secrets as Volume
apiVersion: v1
kind: Pod
metadata:
  name: secret-volume-pod
spec:
  containers:
  - name: app
    image: nginx:1.20
    volumeMounts:
    - name: secret-volume
      mountPath: /etc/secrets
      readOnly: true
    - name: tls-volume
      mountPath: /etc/ssl/certs
      readOnly: true
  volumes:
  - name: secret-volume
    secret:
      secretName: db-credentials
  - name: tls-volume
    secret:
      secretName: tls-secret

---
# Deployment with ConfigMap and Secret
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: web-app
        image: nginx:1.20
        ports:
        - containerPort: 80
        env:
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: database_host
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: db-credentials
              key: password
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: app-properties
          mountPath: /etc/app
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: app-properties
        configMap:
          name: app-properties
      imagePullSecrets:
      - name: registry-secret

---
# Multi-container Pod with Shared ConfigMap
apiVersion: v1
kind: Pod
metadata:
  name: multi-container-config-pod
spec:
  containers:
  - name: web-server
    image: nginx:1.20
    volumeMounts:
    - name: shared-config
      mountPath: /etc/config
    ports:
    - containerPort: 80
  - name: log-processor
    image: busybox:1.35
    command: ['sh', '-c', 'while true; do echo "Processing logs with config from /etc/config"; sleep 30; done']
    volumeMounts:
    - name: shared-config
      mountPath: /etc/config
  volumes:
  - name: shared-config
    configMap:
      name: app-config

---
# Immutable ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: immutable-config
data:
  version: "v1.0.0"
  release: "stable"
  config.yaml: |
    app:
      name: "myapp"
      version: "v1.0.0"
      features:
        - feature1
        - feature2
immutable: true