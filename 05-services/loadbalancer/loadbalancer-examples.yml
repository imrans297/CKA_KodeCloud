# Basic LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: basic-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080

---
# AWS Network Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: aws-nlb-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080

---
# AWS Application Load Balancer
apiVersion: v1
kind: Service
metadata:
  name: aws-alb-service
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "alb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-target-type: "ip"
spec:
  type: LoadBalancer
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080

---
# GCP LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: gcp-loadbalancer
  annotations:
    cloud.google.com/load-balancer-type: "External"
    cloud.google.com/backend-config: '{"default": "my-backend-config"}'
spec:
  type: LoadBalancer
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080

---
# Azure LoadBalancer Service
apiVersion: v1
kind: Service
metadata:
  name: azure-loadbalancer
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "false"
    service.beta.kubernetes.io/azure-load-balancer-mode: "auto"
spec:
  type: LoadBalancer
  selector:
    app: web-app
  ports:
  - port: 80
    targetPort: 8080

---
# Internal LoadBalancer (AWS)
apiVersion: v1
kind: Service
metadata:
  name: internal-loadbalancer
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
spec:
  type: LoadBalancer
  selector:
    app: internal-app
  ports:
  - port: 80
    targetPort: 8080

---
# Multi-Port LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: multi-port-loadbalancer
spec:
  type: LoadBalancer
  selector:
    app: full-stack-app
  ports:
  - name: http
    port: 80
    targetPort: 3000
  - name: https
    port: 443
    targetPort: 3443
  - name: api
    port: 8080
    targetPort: 8080

---
# LoadBalancer with Session Affinity
apiVersion: v1
kind: Service
metadata:
  name: sticky-loadbalancer
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  selector:
    app: stateful-app
  ports:
  - port: 80
    targetPort: 8080

---
# Sample Deployment for LoadBalancer Testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadbalancer-test-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      containers:
      - name: web
        image: nginx:1.20
        ports:
        - containerPort: 80
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP